int[][] memo;
    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        memo = new int[m][n];
        //Only one dimension arary can be filled use this way.
        for (int i = 0; i < m; i++) {
            Arrays.fill(memo[i], -1);
        }
        return dp(s, t, 0, 0);
    }

    //how many ways for s[i,...] to generate t[j,..]
    private int dp(String s, String t, int i, int j) {
        //base case
        if (j == t.length()) return 1;
        //too short to match
        if (s.length() - i < t.length() - j) return 0;

        if (memo[i][j] != -1) return memo[i][j];
        //need to define res, otherwise memo[i][j] = -1 will be used.
        int res = 0;
        if (s.charAt(i) == t.charAt(j)) {
            res += dp(s, t, i + 1, j + 1) + dp(s, t, i + 1, j);
        } else {
            res += dp(s, t, i + 1, j);
        }

        memo[i][j] = res;
        return memo[i][j];
    }
